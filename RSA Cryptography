"""
Pseudo-code for RSA Decryption Program:
1. Start
2. Define RSA decryption function:
   - Inputs: ciphertext (c), private key (d, n)
   - Output: plaintext (m)
   
   Steps for decryption function:
   a. Convert ciphertext (c) from input form (e.g., string) into integer if necessary.
   b. Compute plaintext using the RSA decryption formula:
      m = c^d mod n
   c. Convert the resulting plaintext number back to readable format if necessary.
   
3. Read or input the two ciphertexts:
   - Example: ciphertext1, ciphertext2

4. Read or input the private key components:
   - Example: private_key_d, private_key_n

5. Apply the RSA decryption function to each ciphertext:
   - plaintext1 = RSA_Decrypt(ciphertext1, private_key_d, private_key_n)
   - plaintext2 = RSA_Decrypt(ciphertext2, private_key_d, private_key_n)

6. Output or display the decrypted plaintexts:
   - Display plaintext1, plaintext2

7. End
"""

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
import os

def rsa_decrypt(ciphertext, private_key):
    try:
        plaintext = private_key.decrypt(
            ciphertext,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        return plaintext
    except Exception as e:
        print("Decryption error:", str(e))
        return None

def main():
    # Check if the key and ciphertext files exist
    if not os.path.exists('prv.key') or not os.path.exists('cipher1.bin') or not os.path.exists('cipher2.bin'):
        print("One or more required files are missing.")
        return

    # Load the private key from a PEM file
    with open('prv.key', 'rb') as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,  # Or your passphrase here if the key is encrypted
            backend=default_backend()
        )

    # Read the ciphertexts from binary files
    with open('cipher1.bin', 'rb') as f:
        cipher1 = f.read()
    with open('cipher2.bin', 'rb') as f:
        cipher2 = f.read()

    # Decrypt the ciphertexts
    plaintext1 = rsa_decrypt(cipher1, private_key)
    plaintext2 = rsa_decrypt(cipher2, private_key)

    # Check and print the decrypted plaintexts after converting bytes to string
    if plaintext1:
        print(f"Decrypted plaintext 1: {plaintext1.decode('utf-8')}")
    else:
        print("Failed to decrypt ciphertext 1.")

    if plaintext2:
        print(f"Decrypted plaintext 2: {plaintext2.decode('utf-8')}")
    else:
        print("Failed to decrypt ciphertext 2.")

if __name__ == "__main__":
    main()
