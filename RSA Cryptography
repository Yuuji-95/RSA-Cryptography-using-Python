"""
Pseudo-code for RSA Decryption Program:
1. Start
2. Define RSA decryption function:
   - Inputs: ciphertext (c), private key (d, n)
   - Output: plaintext (m)
   
   Steps for decryption function:
   a. Convert ciphertext (c) from input form (e.g., string) into integer if necessary.
   b. Compute plaintext using the RSA decryption formula:
      m = c^d mod n
   c. Convert the resulting plaintext number back to readable format if necessary.
   
3. Read or input the two ciphertexts:
   - Example: ciphertext1, ciphertext2

4. Read or input the private key components:
   - Example: private_key_d, private_key_n

5. Apply the RSA decryption function to each ciphertext:
   - plaintext1 = RSA_Decrypt(ciphertext1, private_key_d, private_key_n)
   - plaintext2 = RSA_Decrypt(ciphertext2, private_key_d, private_key_n)

6. Output or display the decrypted plaintexts:
   - Display plaintext1, plaintext2

7. End
"""

import rsa

def load_private_key(filepath):
    """
    Load an RSA private key from a file.
    
    Parameters:
    filepath (str): The path to the private key file.

    Returns:
    rsa.PrivateKey: The loaded RSA private key.
    """
    with open(filepath, 'rb') as key_file:
        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())
    return private_key

def decrypt_with_rsa(ciphertext, private_key):
    """
    Decrypt a ciphertext using an RSA private key.

    Parameters:
    ciphertext (bytes): The encrypted data.
    private_key (rsa.PrivateKey): The RSA private key for decryption.

    Returns:
    str: The decrypted plaintext, or None if decryption fails.
    """
    try:
        # Decrypt the data with RSA using the private key
        decrypted_message = rsa.decrypt(ciphertext, private_key)
        return decrypted_message.decode('utf-8')
    except Exception as e:
        print(f"Decryption failed: {e}")
        return None

def main():
    # Load the private key
    private_key = load_private_key('prv.key')

    # Read the ciphertexts from binary files
    with open('cipher1.bin', 'rb') as f:
        cipher1 = f.read()
    with open('cipher2.bin', 'rb') as f:
        cipher2 = f.read()

    # Decrypt the ciphertexts using the loaded private key
    decrypted_text1 = decrypt_with_rsa(cipher1, private_key)
    decrypted_text2 = decrypt_with_rsa(cipher2, private_key)

    # Print the results of decryption
    if decrypted_text1:
        print(f"Decrypted text 1: {decrypted_text1}")
    else:
        print("Failed to decrypt ciphertext 1.")

    if decrypted_text2:
        print(f"Decrypted text 2: {decrypted_text2}")
    else:
        print("Failed to decrypt ciphertext 2.")

if __name__ == "__main__":
    main()
